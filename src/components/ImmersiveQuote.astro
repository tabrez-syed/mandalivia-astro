---
import { Image } from 'astro:assets';

interface Props {
    backgroundImage: ImageMetadata;
    imageAlt?: string;
    lines: string[];
    blackoutPercentage?: number;
}

const { backgroundImage, imageAlt = 'Background image', lines = [], blackoutPercentage = 0 } = Astro.props;
---

<div class="relative aspect-video max-w-5xl mx-auto my-12">
    <div class="bg-white p-4 shadow-2xl rounded-sm rotate-1 transition-transform hover:rotate-0 duration-300">
        <div class="relative overflow-hidden">
            <Image src={backgroundImage} alt={imageAlt} class="object-cover w-full aspect-video" />

            {blackoutPercentage > 0 && <div class="absolute inset-0 bg-black" style={`opacity: ${blackoutPercentage / 100}`} />}

            <div class="absolute inset-0 flex flex-col items-center justify-center text-white text-center p-4">
                <div class="space-y-8 font-['Noto_Serif'] text-2xl sm:text-4xl" data-parallax-container>
                    {
                        lines.map((line, index) => (
                            <p class="transition-all duration-1000 font-['Dancing_Script']" data-quote-line style={`transition-delay: ${index * 200}ms`}>
                                {line}
                            </p>
                        ))
                    }
                </div>
            </div>
        </div>

        <div class="mt-4 h-16 flex items-center justify-center">
            <div class="text-slate-500 font-['Dancing_Script'] text-xl rotate-[-2deg]">
                {new Date().toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('astro:page-load', () => {
        const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;

        if (!prefersReducedMotion) {
            // Fade in animation
            const observer = new IntersectionObserver(
                (entries) => {
                    entries.forEach((entry) => {
                        if (entry.isIntersecting) {
                            entry.target.classList.add('fade-in');
                        }
                    });
                },
                { threshold: 0.1 }
            );

            document.querySelectorAll('[data-quote-line]').forEach((element) => {
                observer.observe(element);
            });

            // Parallax scroll effect
            const parallaxContainer = document.querySelector('[data-parallax-container]');
            if (parallaxContainer) {
                window.addEventListener('scroll', () => {
                    const container = parallaxContainer.closest('.relative');
                    if (!container) return;

                    const containerRect = container.getBoundingClientRect();
                    const containerTop = containerRect.top;
                    const containerHeight = containerRect.height;
                    const viewportHeight = window.innerHeight;

                    if (containerTop < viewportHeight && containerTop > -containerHeight) {
                        const scrollProgress = (viewportHeight - containerTop) / (viewportHeight + containerHeight);
                        const lines = parallaxContainer.querySelectorAll('[data-quote-line]');

                        lines.forEach((line, index) => {
                            const speed = 0.2 + index * 0.1;
                            const maxMove = 50;
                            const movement = Math.min(maxMove, scrollProgress * 100 * speed);
                            (line as HTMLElement).style.transform = `translateY(${movement}px)`;
                        });
                    }
                });
            }
        }
    });
</script>

<style>
    @import url('https://fonts.googleapis.com/css2?family=Dancing+Script:wght@400;700&family=Noto+Serif:ital,wght@0,400;0,700;1,400&display=swap');

    [data-quote-line] {
        opacity: 0.1;
    }

    @media (prefers-reduced-motion: no-preference) {
        [data-quote-line] {
            transition:
                opacity 1000ms,
                transform 1000ms;
        }

        [data-quote-line].fade-in {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @media (prefers-reduced-motion: reduce) {
        [data-quote-line] {
            opacity: 1;
        }
    }
</style>
